// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/renanmav/GoExpert-CleanArch/internal/repository"
	"github.com/renanmav/GoExpert-CleanArch/internal/usecase"
	"github.com/renanmav/GoExpert-Events/pkg/events"
)

// Injectors from wire.go:

func NewCreateOrderUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface, event events.EventInterface) *usecase.CreateOrderUseCase {
	orderRepositoryInterface := repository.NewOrderRepository(db)
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepositoryInterface, eventDispatcher, event)
	return createOrderUseCase
}

func NewReadAllOrdersUseCase(db *sql.DB) *usecase.ReadAllOrdersUseCase {
	orderRepositoryInterface := repository.NewOrderRepository(db)
	readAllOrdersUseCase := usecase.NewReadAllOrdersUseCase(orderRepositoryInterface)
	return readAllOrdersUseCase
}

func NewReadOrderByIdUseCase(db *sql.DB) *usecase.ReadOrderByIdUseCase {
	orderRepositoryInterface := repository.NewOrderRepository(db)
	readOrderByIdUseCase := usecase.NewReadOrderByIdUseCase(orderRepositoryInterface)
	return readOrderByIdUseCase
}

// wire.go:

var setOrderRepositoryDependency = wire.NewSet(repository.NewOrderRepository, wire.Bind(new(repository.OrderRepositoryInterface), new(*repository.OrderRepository)))
